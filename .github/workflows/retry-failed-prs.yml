name: Retry Failed GitHub PRs

# Triggers
on:
  # 1. Scheduled trigger: runs every 15 minutes
  schedule:
    - cron: '*/15 * * * *'
  
  # 2. Manual trigger: allows you to click "Run workflow" in Actions tab
  workflow_dispatch:

env:
  MY_USERNAME: ${{ vars.MY_USERNAME }}

jobs:
  check-and-retry:
    runs-on: ubuntu-latest
    
    # Key "switch" logic
    # Only runs in two cases:
    # 1. Manual trigger (workflow_dispatch)
    # 2. Scheduled trigger AND the ENABLE_SCHEDULED_RETRY variable is 'true'
    if: (github.event_name == 'workflow_dispatch') || (vars.ENABLE_SCHEDULED_RETRY == 'true')
    
    # Matrix strategy: each repository runs as a separate parallel job
    # Repositories are configured via the TARGET_REPOS variable (JSON array format)
    strategy:
      matrix:
        repo: ${{ fromJSON(vars.TARGET_REPOS) }}
      fail-fast: false  # Continue checking other repos even if one fails
    
    steps:
      - name: Repository Information
        env:
          TARGET_REPO: ${{ matrix.repo }}
        run: |
          echo "==============================================="
          echo "Checking repository: $TARGET_REPO"
          echo "Author: $MY_USERNAME"
          echo "==============================================="
          echo ""
      
      - name: Fetch Open PRs
        id: fetch-prs
        env:
          GH_TOKEN: ${{ secrets.MY_PAT }}
          TARGET_REPO: ${{ matrix.repo }}
        run: |
          set -euo pipefail
          
          echo "üìã Fetching all open PRs by '$MY_USERNAME'..."
          all_prs=$(gh pr list --repo "$TARGET_REPO" --author "$MY_USERNAME" --state open --json number,title,headRefOid,url,statusCheckRollup,createdAt,updatedAt)
          
          pr_count=$(echo "$all_prs" | jq 'length')
          echo "Found $pr_count open PR(s)"
          
          # Save to output and file for next steps
          echo "pr_count=$pr_count" >> $GITHUB_OUTPUT
          echo "$all_prs" > /tmp/all_prs.json
          
          if [ "$pr_count" -eq 0 ]; then
            echo ""
            echo "No open PRs found for user '$MY_USERNAME' in '$TARGET_REPO'"
          fi
      
      - name: Display PR Details
        if: steps.fetch-prs.outputs.pr_count != '0'
        run: |
          set -euo pipefail
          echo ""
          
          cat /tmp/all_prs.json | jq -r '.[] | 
            "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n" +
            "PR #\(.number): \(.title)\n" +
            "URL: \(.url)\n" +
            "SHA: \(.headRefOid)\n" +
            "Created: \(.createdAt)\n" +
            "Updated: \(.updatedAt)\n" +
            "Status Checks: \(
              if ((.statusCheckRollup // []) | length) == 0 then
                "No checks configured"
              else
                (.statusCheckRollup | group_by(.state) | 
                map("\(. | length) \(.[0].state)") | join(", "))
              end
            )\n"'
      
      - name: Find Failed PRs
        id: find-failures
        if: steps.fetch-prs.outputs.pr_count != '0'
        run: |
          set -euo pipefail
          
          echo ""
          echo "üîç Looking for PRs with failed checks to retry..."
          echo ""
          
          failed_prs=$(cat /tmp/all_prs.json | jq -r '.[] | select(.statusCheckRollup[]? | .state == "FAILURE") | "\(.number)|\(.headRefOid)|\(.title)"' || true)
          
          if [ -z "$failed_prs" ]; then
            echo "‚úÖ No PRs with failed checks found"
            echo "has_failures=false" >> $GITHUB_OUTPUT
          else
            echo "$failed_prs" > /tmp/failed_prs.txt
            echo "has_failures=true" >> $GITHUB_OUTPUT
            
            # Count and display
            failure_count=$(echo "$failed_prs" | wc -l)
            echo "Found $failure_count PR(s) with failures"
          fi
      
      - name: Retry Failed PRs
        if: steps.find-failures.outputs.has_failures == 'true'
        env:
          GH_TOKEN: ${{ secrets.MY_PAT }}
          TARGET_REPO: ${{ matrix.repo }}
        run: |
          set -euo pipefail
          
          while IFS='|' read -r pr_number pr_sha pr_title; do
            echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
            echo "üî¥ PR #$pr_number has failed checks"
            echo "   Title: $pr_title"
            echo "   SHA: $pr_sha"

            # Find the failed Run ID for this PR + SHA
            run_info=$(gh run list --repo "$TARGET_REPO" --head-sha "$pr_sha" --status failure --limit 1 --json databaseId,workflowName -q '.[0] | select(. != null) | "\(.databaseId)|\(.workflowName)"' 2>/dev/null || true)

            if [ -n "$run_info" ] && [ "$run_info" != "null" ]; then
              run_db_id=$(echo "$run_info" | cut -d'|' -f1)
              workflow_name=$(echo "$run_info" | cut -d'|' -f2-)
              
              if [ -n "$run_db_id" ] && [ "$run_db_id" != "null" ]; then
                echo "   Found failed workflow: $workflow_name (Run ID: $run_db_id)"
                echo "   üîÑ Attempting to re-run failed jobs..."
                
                # Trigger retry (only failed jobs)
                set +e
                gh run rerun "$run_db_id" --failed --repo "$TARGET_REPO" 2>&1
                retry_result=$?
                set -e
                
                if [ $retry_result -eq 0 ]; then
                  echo "   ‚úÖ Successfully triggered retry for Run ID $run_db_id"
                else
                  echo "   ‚ùå Failed to trigger retry for Run ID $run_db_id (exit code: $retry_result)"
                fi
              else
                echo "   ‚ö†Ô∏è  Could not extract valid run ID"
              fi
            else
              echo "   ‚ö†Ô∏è  Could not find a specific failed run to retry"
            fi
            echo ""
          done < /tmp/failed_prs.txt
      
      - name: Summary
        if: always()
        env:
          TARGET_REPO: ${{ matrix.repo }}
        run: |
          echo ""
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
          echo "Check complete for repository: $TARGET_REPO"
          echo "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ"
